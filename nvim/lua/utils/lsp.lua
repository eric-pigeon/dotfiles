-- local M = {}
-- 
-- function M.on_attach(client, bufnr)
--   local lsp_mappings = require("utils").empty_map_table()
-- 
-- 
--   if is_available "telescope.nvim" then -- setup telescope mappings if available
--     if lsp_mappings.n.gd then lsp_mappings.n.gd[1] = function() require("telescope.builtin").lsp_definitions() end end
--     if lsp_mappings.n.gI then
--       lsp_mappings.n.gI[1] = function() require("telescope.builtin").lsp_implementations() end
--     end
--     if lsp_mappings.n.gr then lsp_mappings.n.gr[1] = function() require("telescope.builtin").lsp_references() end end
--     if lsp_mappings.n["<leader>lR"] then
--       lsp_mappings.n["<leader>lR"][1] = function() require("telescope.builtin").lsp_references() end
--     end
--     if lsp_mappings.n.gT then
--       lsp_mappings.n.gT[1] = function() require("telescope.builtin").lsp_type_definitions() end
--     end
--     if lsp_mappings.n["<leader>lG"] then
--       lsp_mappings.n["<leader>lG"][1] = function()
--         vim.ui.input({ prompt = "Symbol Query: (leave empty for word under cursor)" }, function(query)
--           if query then
--             -- word under cursor if given query is empty
--             if query == "" then query = vim.fn.expand "<cword>" end
--             require("telescope.builtin").lsp_workspace_symbols {
--               query = query,
--               prompt_title = ("Find word (%s)"):format(query),
--             }
--           end
--         end)
--       end
--     end
--   end
-- end
-- 
-- return M
